<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Weight @northeye]]></title>
  <link href="http://note.ga.vg/atom.xml" rel="self"/>
  <link href="http://note.ga.vg/"/>
  <updated>2012-08-07T14:48:00+09:00</updated>
  <id>http://note.ga.vg/</id>
  <author>
    <name><![CDATA[Takuo Kitame]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[au IS12Sでスワップを有効にする]]></title>
    <link href="http://note.ga.vg/blog/2012/08/07/is12s-enable-swap/"/>
    <updated>2012-08-07T00:14:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/08/07/is12s-enable-swap</id>
    <content type="html"><![CDATA[<p>IS12S をICS にアップデートしてからというもの、メモリが足りなくていささか不便になってきました。<br/>
そこでスワップを導入してみることにします。 ※ 要root</p>

<!-- more -->


<p>そもそも1GBもあるはずなにどうなってるのか調べてみると&#8230;</p>

<pre><code>$ cat /proc/meminfo
MemTotal:         650404 kB
MemFree:           20656 kB
Buffers:             376 kB
Cached:            71860 kB
...
</code></pre>

<p>どうやらカーネルに予約されているのか知りませんが650MB弱しか使えないようですね。</p>

<h3>カーネルの変更は不要、root は必要</h3>

<p>幸いなことに、IS12Sのカーネルはswapがを扱えるようになっていますので、カーネルへの変更は不要です。<br/>
root(とbusybox)が必要ですので注意。rootの取得方法は下記URLのサイト様を参考にするとよいです。</p>

<p><a href="http://blog.huhka.com/2012/06/rooting-toolkit-for-xperia-acro-hd.html">http://blog.huhka.com/2012/06/rooting-toolkit-for-xperia-acro-hd.html</a>
<a href="http://blog.huhka.com/2012/07/xperia-acro-hd-kddi-is12sics-root.html">http://blog.huhka.com/2012/07/xperia-acro-hd-kddi-is12sics-root.html</a>
<a href="http://blog.huhka.com/2012/08/gbis12sicsroot.html">http://blog.huhka.com/2012/08/gbis12sicsroot.html</a></p>

<p>いずれも2.3.7の状態である必要があるので4.0にしちゃった場合はなんとかして2.3.7に戻す必要があります。(ftfがあれば戻せる)</p>

<h3>どこにスワップ領域を確保するか</h3>

<p>さて、スワップを有効にするにはスワップ<strong>パーティション</strong>を作るか、スワップ<strong>ファイル</strong>をつくるかの2通りありますが、SDカードにスワップ<strong>ファイル</strong>を作るのはやめたほうがよさそうです。
(スワップを有効にしたままSDカードをマウント解除すると挙動がおかしくなるため)</p>

<p>スワップ<strong>ファイル</strong>を作る場合は/sdcard/(内蔵ストレージ)とか/data/ のどっかに作ったほうがよいでしょう。
しかし、/sdcard/swapfile のように内蔵ストレージに作ると、後述する手順で起動時に有効にすることができないため、再起動のたびに手動で有効にしなくてはならないことを留意してください。</p>

<p>また、SDカード上にスワップ<strong>パーティション</strong>を作る場合もクラス10とか速いSDカードを使ったほうがよいでしょう。</p>

<h3>スワップファイルを作る場合</h3>

<p>adb shell で作業を行います。 su でrootになる必要があります。</p>

<pre><code>$ su
# dd if=/dev/zero of=/data/local/swapfile bs=$((1024 * 1024)) count=256
# chmod 644 /data/local/swapfile
# mkswap /data/local/swapfile
# swapon /data/local/swapfile
</code></pre>

<p>これで 256MBのスワップファイルを作り、有効になりました。</p>

<h3>SDカードにスワップパーティションを作る場合</h3>

<p>少々面倒ですが、adb shell だけでもできます。<br/>
SDカードの中身は全部消えるので注意。</p>

<p>まず SDカードをアンマウント</p>

<pre><code>$ su
# umount /mnt/ext_card
</code></pre>

<p>fdisk でパーティションを切ります。 SDカードは /dev/block/mmcblk1 です。</p>

<pre><code># fdisk /dev/block/mmcblk1

The number of cylinders for this disk is set to 3801.
There is nothing wrong with that, but this is larger than 1024,
and could in certain setups cause problems with:
1) software that runs at boot time (e.g., old versions of LILO)
2) booting and partitioning software from other OSs
   (e.g., DOS FDISK, OS/2 FDISK)

Command (m for help): p

Disk /dev/block/mmcblk1: 31.3 GB, 31393316864 bytes
256 heads, 63 sectors/track, 3801 cylinders
Units = cylinders of 16128 * 512 = 8257536 bytes

              Device Boot      Start         End      Blocks  Id System
/dev/block/mmcblk1p1   *           1        3801    30651232+  c Win95 FAT32 (LBA)

Command (m for help): d
Selected partition 1

Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-3801, default 1): Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3801, default 3801): 3768

Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p
Partition number (1-4): 2
First cylinder (3769-3801, default 3769): Using default value 3769
Last cylinder or +size or +sizeM or +sizeK (3769-3801, default 3801): Using default value 3801

Command (m for help): p

Disk /dev/block/mmcblk1: 31.3 GB, 31393316864 bytes
256 heads, 63 sectors/track, 3801 cylinders
Units = cylinders of 16128 * 512 = 8257536 bytes

              Device Boot      Start         End      Blocks  Id System
/dev/block/mmcblk1p1               1        3768    30385120+ 83 Linux
/dev/block/mmcblk1p2            3769        3801      266112  83 Linux

Command (m for help): t 
Partition number (1-4): 1
Hex code (type L to list codes): c
Changed system type of partition 1 to c (Win95 FAT32 (LBA))

Command (m for help): a
Partition number (1-4): 1

Command (m for help): t
Partition number (1-4): 2
Hex code (type L to list codes): 82
Changed system type of partition 2 to 82 (Linux swap)

Command (m for help): p

Disk /dev/block/mmcblk1: 31.3 GB, 31393316864 bytes
256 heads, 63 sectors/track, 3801 cylinders
Units = cylinders of 16128 * 512 = 8257536 bytes

              Device Boot      Start         End      Blocks  Id System
/dev/block/mmcblk1p1   *           1        3768    30385120+  c Win95 FAT32 (LBA)
/dev/block/mmcblk1p2            3769        3801      266112  82 Linux swap

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table

# busybox mkdosfs /dev/block/mmcblk1p1
# mkswap /dev/block/mmcblk1p2 
Setting up swapspace version 1, size = 272494592 bytes
# swapon /dev/block/mmcblk1p2
</code></pre>

<p>これでだいたい256MBのスワップパーティションが作れました。
一番目のパーティションは通常使用するvfatパーティションです。(boot フラグは不要でしょうが、最初からついてたので付けただけです)
サイズは好きにしたらよいと思いますが、一番目はFAT32にしたほうが無難な気がします。</p>

<p>あとはスワップの頻度を調整します</p>

<pre><code># sysctl -w vm.swappiness=40
</code></pre>

<p>値は0から100で100が最も頻度が高くなります。だいたい30くらいがいいようですが、様子を見ながら調整するとよいでしょう。<br/>
カーネルのデフォルトは60です。</p>

<h3>起動時に有効にするために</h3>

<p>IS12S は init.d 的なものがなくユーザー追加のスクリプトを起動時に実行することはできませんが、起動時に <strong>/system/etc/install-recovery.sh</strong> というスクリプトを実行している箇所があるので、これを利用します。<br/>
<strong>/system/etc/install-recovery.sh</strong> そのものは標準では存在しないので新規に作ることになります。
スワップファイルの場合、このスクリプトの実行時には /sdcard がマウントされていないので、/sdcard/ にファイルを作った場合は注意です。</p>

<figure class='code'><figcaption><span>/system/etc/install-recovery.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># パーティションの場合</span>
</span><span class='line'>swapon /dev/block/mmcblk1p2
</span><span class='line'><span class="c"># ファイルの場合</span>
</span><span class='line'><span class="c"># swapon /data/local/swapfile</span>
</span><span class='line'>sysctl -w vm.swappiness<span class="o">=</span>40
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで <strong>install-recovery.sh</strong> を /sdcard/ に作り、下記のコマンドでコピーします。</p>

<pre><code>$ su
# cd /system/etc
# mount -o remount,rw /system ; cp /sdcard/install-recovery.sh . ; chmod 755 install-recovery.sh ; mount -o remount,ro /system
</code></pre>

<p>一行で実行すればリマウントによる再起動を回避できるかと思われます。</p>

<p>というわけでスワップを有効にできました。</p>

<pre><code>$ su
# free
          total         used         free       shared      buffers
  Mem:       650404       622388        28016            0         3128
 Swap:       266108        32388       233720
Total:       916512       654776       261736
# cat /proc/meminfo
MemTotal:         650404 kB
MemFree:           29596 kB
Buffers:            3136 kB
Cached:           175632 kB
SwapCached:        13048 kB
Active:           250536 kB
Inactive:         264296 kB
Active(anon):     163560 kB
Inactive(anon):   174236 kB
Active(file):      86976 kB
Inactive(file):    90060 kB
Unevictable:        1228 kB
Mlocked:               0 kB
HighTotal:        523264 kB
HighFree:           6260 kB
LowTotal:         127140 kB
LowFree:           23336 kB
SwapTotal:        266108 kB
SwapFree:         233728 kB
...
</code></pre>

<p>効果のほどですが、OOMでバックグラウンド処理が途中で殺されることがなくなった気がします。</p>

<p><a href="https://lh3.googleusercontent.com/-CfWIVT_CFTY/UB_8w-H4_9I/AAAAAAAAKg4/he2aOplKlB4/s800/2012-08-07%252002.18.31.png" target="_blank"><img src="https://lh3.googleusercontent.com/-CfWIVT_CFTY/UB_8w-H4_9I/AAAAAAAAKg4/he2aOplKlB4/s288/2012-08-07%252002.18.31.png" title="System Tuner" ></a><br/>
結構使ってますが空きメモリにそこそこ余裕が見られます。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0065SI5SK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007WTAJTO" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オーディオテクニカ AT-PHA05BTを買った]]></title>
    <link href="http://note.ga.vg/blog/2012/08/05/review-at-pha05bt/"/>
    <updated>2012-08-05T02:47:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/08/05/review-at-pha05bt</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/dp/B0087BQJUO/takuojp02-22/ref=nosim/" target="_blank"><img class="right" src="https://lh3.googleusercontent.com/-TJH6xcQYckw/UB1nCKMhbfI/AAAAAAAAKfI/KqD5AG8TbPE/s144/AT-BT05.jpeg"></a>
ソニエリのMW600を落っことして壊してしまったので、代替として<a href="http://www.audio-technica.co.jp/atj/show_model.php?modelId=1536">オーディオテクニカのAT-PHA05BT</a>を買ってみましたのでレビューです。<br/>
(買ったのはヘッドフォン付きのAT-BT05ですが)</p>

<!-- more -->


<p>まず、MW600の何がいけなかったのか。<br/>
これはもう散々言われていることなのですが、MW600にはホールド(ロック)機能がなく、ちょっとボタンに触れると操作が実行されてしまうという、大変デリケートな機器となっております。<br/>
また、音量キーがタッチセンサーになっており、これまた大変操作しづらい構造になっています。<br/>
その他の点については概ね良好でした。</p>

<p>さて、AT-PHA05BTはどうなのか。<br/>
まず外見から…<br/>
でかい。MWと比較した画像を載せますが、第一印象でかい、です。<br/>
まぁアンプも積んでいるようなのでこのサイズは妥当なのかも知れません。
<a href="https://lh3.googleusercontent.com/-HBpamj2pS2o/UB1S8xCqQFI/AAAAAAAAKdU/-HgGmZkLA6E/s800/DSC_0191.jpg" target="_blank"><img src="https://lh3.googleusercontent.com/-HBpamj2pS2o/UB1S8xCqQFI/AAAAAAAAKdU/-HgGmZkLA6E/s288/DSC_0191.jpg" title="大きさ比較" ></a></p>

<p>MW600で不満とされていた、ホールド機能はついています。<br/>
また音量キーもちゃんとしたボタンであります。<br/>
<a href="https://lh5.googleusercontent.com/-mCT9EjMy53g/UB1jRBbvw-I/AAAAAAAAKeU/V79agD7zV08/s800/DSC_0192.jpg" target="_blank"><img src="https://lh5.googleusercontent.com/-mCT9EjMy53g/UB1jRBbvw-I/AAAAAAAAKeU/V79agD7zV08/s288/DSC_0192.jpg"></a><br/>
ホールドと電源、左に見える□はストラップホール。</p>

<p><a href="https://lh4.googleusercontent.com/-4JRjqo3INUU/UB1jzvrE7bI/AAAAAAAAKes/KYACkGhpT-8/s800/DSC_0193.jpg" target="_blank"><img src="https://lh4.googleusercontent.com/-4JRjqo3INUU/UB1jzvrE7bI/AAAAAAAAKes/KYACkGhpT-8/s288/DSC_0193.jpg"></a><br/>
ミュージックコントロール関連のキー</p>

<p>その他優位な点としてはペアリング機器を8台まで記憶できる…(MW600は3台)というのがあるのですが、実はAT-PHA05BT側から接続する機器を選べる機能はなく、スマートフォンや携帯電話等ペアリングした相手側から接続をしなくてはなりません。<br/>
これの良し悪しは人に依りそうですが、MW600ではMW600側から機器を選択できました。</p>

<p>その他の機能はほぼMW600と同等なので特筆すべき点はありません。<br/>
強いて言えば、ペアリングボタンと充電用のUSBコネクタはカバーで覆われており、それらを使用する場合はカバーをはずさねばなりません。<br/>
<a href="https://lh5.googleusercontent.com/-HFhOkbEVlZ4/UB3vVhGRmlI/AAAAAAAAKf4/C-Xgx2c0JmA/s800/DSC_0194.jpg" target="_blank"><img src="https://lh5.googleusercontent.com/-HFhOkbEVlZ4/UB3vVhGRmlI/AAAAAAAAKf4/C-Xgx2c0JmA/s288/DSC_0194.jpg"></a></p>

<p>アンプ機能はそれこそ個人で受ける印象は違うでしょう。自分の場合はAndroidのイコライザで十分なので不要かもしれません。</p>

<p>デザイン性と大きさがちょっと不満ですが実用面には影響しないし、なにしろホールドができるので雑に扱っても誤操作しなくてよいです。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0065V9TXC" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0087BQCHE" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0087BQJUO" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B003N111Y2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nasne の HDDを1TBに換装]]></title>
    <link href="http://note.ga.vg/blog/2012/07/25/replacing-nasne-hdd-with-1tb/"/>
    <updated>2012-07-25T17:22:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/07/25/replacing-nasne-hdd-with-1tb</id>
    <content type="html"><![CDATA[<p><a href="http://note.ga.vg/blog/2012/07/21/replacing-hdd-of-nasne/">先日の記事</a>では詳細な換装方法を書きましたが、サンプルに古くて容量の小さいHDDを利用して実験したまででした。
今回、実際に新しい1TBのHDDを買ってきて実践しましたのでリポートです。</p>

<!-- more -->


<p>買ってきたのは東芝の2.5インチ1TB HDD(<a href="http://www.amazon.co.jp/dp/B007XCCTEI/ref=as_li_ss_til?tag=takuojp02-22&amp;camp=1027&amp;creative=7407&amp;linkCode=as4&amp;creativeASIN=B007XCCTEI&amp;adid=1K2S5CSEZ6C3GDTCVFP8&amp;&amp;ref-refURL=http%3A%2F%2Flocalhost%3A4000%2Fblog%2F2012%2F07%2F25%2Freplacing-nasne-hdd-with-1tb%2F">MQ01ABD100</a> 9.5mm厚)で7,489円でした。
USB接続のHDDケースは玄人志向の2.5インチ USB3.0接続(<a href="http://www.amazon.co.jp/dp/B007SQJ7LC/ref=as_li_ss_til?tag=takuojp02-22&amp;camp=1027&amp;creative=7407&amp;linkCode=as4&amp;creativeASIN=B007SQJ7LC&amp;adid=0KWAZQJ2F6T10GB9JCQ6&amp;&amp;ref-refURL=http%3A%2F%2Flocalhost%3A4000%2Fblog%2F2012%2F07%2F25%2Freplacing-nasne-hdd-with-1tb%2F">GW2.5TL-U3</a>)で980円と大変安いものです。ACアダプタがないものですが一時的にコピーするくらいにしか使わないので平気でしょう。</p>

<p>手順としては<a href="http://note.ga.vg/blog/2012/07/21/replacing-hdd-of-nasne/">先日の記事</a>どおりで、</p>

<p><strong>1. nasne から HDDをはずし、PCに接続して dd を使いイメージを取り出す (数分)</strong></p>

<pre><code># dd if=/dev/sdd of=nasne.img bs=512 count=2623488
</code></pre>

<p><strong>2. xfs 領域をマウントし、PCの適当なところに rsync -vaxXH でコピーする (一瞬)</strong></p>

<pre><code># mount -o ro /dev/sdd3 /mnt
# rsync -vaxXH /mnt/ /var/tmp/nasne-xfs
... (略)
# umount /mnt
</code></pre>

<p><strong>3. アンマウントしてUSBを外し、新しいHDDに入れ替え、イメージを書き込む (数分)</strong></p>

<pre><code># dd if=nasne.img of=/dev/sdd
</code></pre>

<p><strong>4. パーティションを編集(sdd3を作り直し)し、退避したxfs領域を rsync でコピーする (一瞬)</strong></p>

<pre><code># fdisk /dev/sdd
... (略)   
# mkfs.xfs -f /dev/sdd3
# mount /dev/sdd3 /mnt
# rsync -vaxXH /var/tmp/nasne-xfs/ /mnt/
... (略)
# umount /mnt
</code></pre>

<p><strong>5. HDDをPCから外し、nasne に装着して起動確認して組み立てる (数分)</strong></p>

<p>以上の工程すべてで15分ほどで終わりました。(起動も問題なく一発で行けました。前回はやはりHDDが古過ぎたのかもしれません、超遅いし。)<br/>
xfsを操作するのでどうしてもLinuxが必要になってしまいますが、HDDをまるごとコピーするやりかただと2時間から3時間ほどかかるようなので大幅な短縮と言えます。</p>

<p>蛇足ですが、nasne に外付けのUSB HDDを装着すると、録画データは先に外付けのHDDに保存されていくようです。<br/>
また、torneから参照するとnasneの空き容量は内蔵と外付けの合計値になっており、区別して保存先を指定するようなことはできないみたいです。</p>

<p>取り出したnasneのHDDが500GBで半端だし使い道がないなーと思いましたが、こないだ買ったPS3のHDDが160GBなのでこれと交換するのがいいかもしれません。今時160GBはゴミ同然と判断できるし切り捨てるにもよいでしょう…。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007V9T9ZK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007SQJ7LC" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007XCCTEI" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nasne のHDDを時間かけずに換装する]]></title>
    <link href="http://note.ga.vg/blog/2012/07/21/replacing-hdd-of-nasne/"/>
    <updated>2012-07-21T02:00:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/07/21/replacing-hdd-of-nasne</id>
    <content type="html"><![CDATA[<p>HDDをまるごとバックアップして書き戻す作業は大変時間がかかるので、必要な分だけイメージを取得するようにして待ち時間を短縮します。<br/>
特別な機材は必要ありませんが、USBのHDDがケースがあると便利だと思います。<br/>
Linuxでの作業になるので多少のLinuxの知識が必要になります。</p>

<!-- more -->


<p>前提として作業はLinux上で行い、使うツールは dd, parted, fdisk, xfsprogs などです。<br/>
nasne の HDD は2.5インチの7mm厚ですが、構造的に換装するHDDは9.5mm厚でも問題ありません。<br/>
※  注意 : <strong>nasneのHDDにはハードウェア固有の情報が書き込まれており、別の個体では利用できません。</strong></p>

<p>まず nasne から HDD を取り外し、Linux PCに付けます。(USB HDDケースがあると便利)
nasne の HDD を <strong>/dev/sdd</strong> として認識したとします。<br/>
xfs の領域である <strong>/dev/sdd3</strong> をtar (rsync -aHxXとかでも可)でバックアップします。</p>

<pre><code># mount -o ro /dev/sdd3 /mnt
# cd /mnt
# tar -cpzf /backup/xfs.tgz .
# cd / &amp;&amp; umount /dev/sdd3
</code></pre>

<p>パーティション番号2までのサイズ(単位はセクタにする)をメモします。</p>

<pre><code># parted /dev/sdd
GNU Parted 2.3
Using /dev/sdd
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) unit s
(parted) p
Model: Hitachi HTS545050A7E380 (scsi)
Disk /dev/sdd: 62500864s
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start     End        Size       Type     File system  Flags
 1      2048s     526335s    524288s    primary  ext3         boot
 2      526336s   2623487s   2097152s   primary  ext3
 3      2623488s  62500863s  59877376s  primary  xfs

(parted) quit
</code></pre>

<p>セクタサイズは512Bで、 <strong>/dev/sdd2</strong> のEndが <strong>2623487</strong> であることがわかります。<br/>
dd で先頭から <strong>/dev/sdd2</strong> の終わりまでのイメージを取得します。<br/>
※ セクタ番号は0から始まるのでcountは1増やす。</p>

<pre><code># cd / &amp;&amp; umount /mnt
# dd if=/dev/sdd of=/backup/hdd.img bs=512 count=2623488
</code></pre>

<p>換装用の新しいディスクを接続します。 <strong>/dev/sde</strong> とします。 (今回は敢えて小さい120GBのHDDを使用してます) <br/>
ディスクイメージを書き込みます。</p>

<pre><code># dd if=/backup/hdd.img of=/dev/sde
</code></pre>

<p>または直接 /dev/sdd から /dev/sde に dd してもいいと思います。<br/>
イメージサイズは1GB程度なので大して時間はかかりません。</p>

<p>/dev/sde3 を消して作り直します。</p>

<pre><code># fdisk /dev/sde

Command (m for help): p

Disk /dev/sde: 120.0 GB, 120034123776 bytes
255 heads, 63 sectors/track, 14593 cylinders, total 234441648 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000d7605

   Device Boot      Start         End      Blocks   Id  System
/dev/sde1   *        2048      526335      262144   83  Linux
/dev/sde2          526336     2623487     1048576   83  Linux
/dev/sde3         2623488    62500863    29938688   83  Linux

Command (m for help): d
Partition number (1-4): 3

Command (m for help): p

Disk /dev/sde: 120.0 GB, 120034123776 bytes
255 heads, 63 sectors/track, 14593 cylinders, total 234441648 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000d7605

   Device Boot      Start         End      Blocks   Id  System
/dev/sde1   *        2048      526335      262144   83  Linux
/dev/sde2          526336     2623487     1048576   83  Linux

Command (m for help): n
Partition type:
   p   primary (2 primary, 0 extended, 2 free)
   e   extended
Select (default p): p
Partition number (1-4, default 3):
Using default value 3
First sector (2623488-234441647, default 2623488):
Using default value 2623488
Last sector, +sectors or +size{K,M,G} (2623488-234441647, default 234441647):
Using default value 234441647

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre>

<p>xfsファイルシステムを作り直します。</p>

<pre><code># mkfs.xfs -f /dev/sde3
meta-data=/dev/sde3              isize=256    agcount=4, agsize=7244318 blks
         =                       sectsz=512   attr=2, projid32bit=0
data     =                       bsize=4096   blocks=28977270, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0
log      =internal log           bsize=4096   blocks=14149, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
</code></pre>

<p><strong>/dev/sde3</strong> をマウントしてtarでバックアップしたxfs領域を展開します。<br/>
(これやらなくても動きましたがやったほうがいい気がします)</p>

<pre><code># mount /dev/sde3 /mnt
# tar -xzpf /backup/xfs.tgz -C /mnt
# umount /mnt
</code></pre>

<p>ディスクを nasne に取り付けて起動します。
<img src="http://note.ga.vg/assets/screenshot/nasne-hdd-replace.png"></p>

<p>よくわかりませんが、起動時に電源LEDとREC LEDが両方赤点灯でフリーズすることがありました。<br/>
なんどか同じ手順をやり直していたら起動したりしなかったりしました。<br/>
サンプルにつかったHDD(HTS541612J9SA00)が古過ぎて調子が悪いのかもしれませんが、原因は定かではありません。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007NTJWB4" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007XCCTEI" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B004QZAPMS" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0053VPYHK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007V9T9ZK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0035V5EA2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nasne のファイルシステムを見てみる]]></title>
    <link href="http://note.ga.vg/blog/2012/07/19/filesystem-of-nasne/"/>
    <updated>2012-07-19T22:52:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/07/19/filesystem-of-nasne</id>
    <content type="html"><![CDATA[<p>物理的な分解記事とかよりも面白いと思ったのでちょっとだけnasneの中身をみてました。</p>

<!-- more -->


<p>まずはパーティションの確認から。</p>

<pre><code># parted /dev/sdd
GNU Parted 2.3
Using /dev/sdd
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print
Model: Hitachi HTS545050A7E380 (scsi)
Disk /dev/sdd: 500GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  269MB   268MB   primary  ext3         boot
 2      269MB   1343MB  1074MB  primary  ext3
 3      1343MB  500GB   499GB   primary  xfs
</code></pre>

<p>ほうほう。Linuxっぽい。xfsはきっと録画した実データ置き場ですね。<br/>
mount してみます。</p>

<pre><code># mount -o ro /dev/sdd1 /mnt/nasne/1
# mount -o ro /dev/sdd2 /mnt/nasne/2
# mount -o ro /dev/sdd3 /mnt/nasne/3
</code></pre>

<p>間違えて壊したくないので read-only でマウントしてます。</p>

<pre><code># cd /mnt/nasne
# find &gt; /tmp/nasne.fs.txt
</code></pre>

<p><a href="http://note.ga.vg/assets/nasne.fs.txt">nasne.fs.txt</a><br/>
telnetd とか samba とか興味深いですね。samba は3.0.37でした。<br/>
sbin,binなどにあるプログラムの実体はほぼ全てbusyboxです。</p>

<p>最初のパーティション(1)にboot関連(多分)のものが入っており、おそらくハードウェア個体に紐付けられてこのnasneでしか起動できないようになってます。<br/>
ファイルの中身は暗号化されており、わかりません。</p>

<p>この時点ですでに1番組録画してあるのですが、パーティション(3)にある録画データはちゃんと暗号化(きっとハード固有の鍵により)されております。</p>

<p>アーキテクチャを調べてみます。</p>

<pre><code># file 2/lib/libc-2.9.so
libc-2.9.so: ELF 32-bit LSB shared object, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.16, with unknown capability 0xf41 = 0x756e6700, with unknown capability 0x70100 = 0x1040000, not stripped
</code></pre>

<p>MIPSだそうです。</p>

<pre><code># cat 2/etc/issue
********************************************************************************
*              Welcome to Viper MIPS Linux :-)                                 *
********************************************************************************
</code></pre>

<p>ほうほう</p>

<pre><code># cat 2/etc/passwd
root::0:0:root:/root:/bin/sh
www:x:80:80:root:/www:/bin/sh
nobody:x:99:99:Nobody:/:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
</code></pre>

<p>ははあ。rootのパスワードはないんですね。</p>

<pre><code># cat 2/etc/init.d/rcS
#!/bin/sh
trap "" SIGHUP
#echo "Mounting proc"
mount -t proc none /proc
#echo "Mounting usbfs"
mount -t usbfs none /proc/bus/usb
#echo "Mounting sysfs"
mount -t sysfs none /sys

#echo "Starting uevent daemon"
/usr/bin/uevent_daemon

#echo "Starting Udev"
start_udev

#echo "Mounting devpts"
mount -t devpts none /dev/pts

sysctl -p

#export HOSTNAME="nasne"
#echo "Setting hostname $HOSTNAME"
#hostname $HOSTNAME

#echo "Bringing up loopback device"
ifconfig lo 127.0.0.1 netmask 255.0.0.0 up
route add -net 127.0.0.0 netmask 255.0.0.0 dev lo

#echo "Bringing up Eth0"

# ---- for DTVTuner ----
/opt/dtvtuner/etc/startdtvtuner
</code></pre>

<p>なるほど。<br/>
ここでinetdとかtelnetdを起動するように変更すれば稼働中のnasneにログインできるかもしれません。</p>

<p>というわけで、別のHDDに換装するにはまるごとddしてコピーし、partedでxfsのパーティションを適当に大きくしたりすればよさそうです。<br/>
肝心のカーネルイメージが何処にあるのかわかりませんでした。</p>

<p><strong>(2012-07-20追記)</strong></p>

<p>実際に /usr/sbin/inetd を起動するように書いてみたのですが、どうやらinitramfsかそのへんの処理でどこかに存在するイメージの展開で / を再作成しているようで、編集前の状態に戻ってしまいます。</p>

<p>試しに dumpe2fs で / の状態を確認すると、</p>

<pre><code>Filesystem created:       Wed May 16 17:52:14 2012
Last mount time:          Thu Jan  1 09:00:05 1970
Last write time:          Thu Jan  1 09:00:05 1970
</code></pre>

<p>となっており、mkfsはされてない(初期化ではない)が、システムの起動直後にマウントされ、再作成されてるように思えます。<br/>
そこで、<strong>chattr +i {rootfs}/etc/init.d/rcS</strong> で書き込み禁止属性をつけ、rcSが書き戻されないようにしてから起動して見ましたが… 起動せず。<br/>
どうやら展開中のエラーで起動処理が止まってるのだと思われます。(<strong>chattr -i</strong> しなおしたらなおりました)</p>

<p>そんなわけで、簡単に好きなプログラムを走らせるようにはできておらず、もうひと工夫が必要そうです。(あるいはexploitを見つけるか)</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B007V9T9ZK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0034KZXBO" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0035V5EA2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのVPSでLXC(Linux Container)を動かす]]></title>
    <link href="http://note.ga.vg/blog/2012/07/17/lxc-on-sakura-vps/"/>
    <updated>2012-07-17T19:32:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/07/17/lxc-on-sakura-vps</id>
    <content type="html"><![CDATA[<p>yaegashiセムパイが&#8221;<a href="http://blog.keshi.org/hogememo/2012/04/05/openvz-on-sakura-vps">さくらのVPSでOpenVZを動かす</a>&#8220;というエントリを書かれていて、自分もやろうと思ったのですが、OpenVZはカーネルに手を入れる必要があり、Debian wheezy環境では面倒だったので代わりに<a href="http://lxc.sf.net/">LXC</a>という仮想環境を導入することにしました。</p>

<!-- more -->


<p>OpenVZもそうですが、LXCはコンテナ型の仮想環境であり、KVMなどのハードウェア仮想化とは違って仮想化によるオーバーヘッドはほぼありません。<br/>
雑に言えばchrootなだけなので、VT-xのような仮想化支援付きのCPUすら不要で、KVMやVMware,VirtualBoxといった仮想環境と併用できます。</p>

<h3>VPSで仮想環境を構築する理由</h3>

<p><a href="http://vps.sakura.ad.jp/">さくらのVPS</a>はKVM上に構築されているとのことですが、こういった仮想環境で更に仮想環境を動かす意味はなんなのか。</p>

<p>僕は今のVPS(2Gプラン)に至るまで、3回ほど環境の移行をしてきました。<br/>
1回目は自宅サーバからさくらVPS(512)、2回目は1Gプランへ移行、3回目は現在の2Gプランといった具合です。</p>

<p>そのたび行う移行作業に大変苦労しており、その間ロストされている何かが必ずあって今現在、最初の自宅サーバと全く同一の環境にはなっていないと思います。</p>

<p>その点仮想環境であれば、いくつかの設定ファイルとrootfsを固めたもを新しい環境で展開し起動するだけで楽かつ完全な移行ができるという事になります。<br/>
また、LXCはLinux kernel標準の機能(cgroupとkernel namespaceを使用)であり、いまどきのLinux環境ならどこでも動かせるOSレベルの仮想化技術です。(OpenVZはpatchがいるのでそうはいきません)</p>

<p>そんなわけで、今後さくらVPSを離れるか、別のプランに移行するかはわかりませんが、将来に備えVPS上での仮想環境を構築しました。</p>

<h3>導入</h3>

<p>当方の環境はDebian wheezy(amd64)ですので、それ前提で書きます。</p>

<p>lxcvm00 という名前のコンテナをdebianテンプレートで作成します。
ネットワークはブリッジで、ブリッジインタフェースはlxcbr0を使います。</p>

<pre><code>host # apt-get install lxc debootstrap
host # cat &lt;&lt;EOL &gt;&gt; /etc/network/interfaces
auto lxcbr0
iface lxcbr0 inet static
        address 10.0.0.1
        netmask 255.255.255.0
        bridge_ports none
        bridge_stp off
EOL
host # ifup lxcbr0
host # echo "cgroup /sys/fs/cgroup  cgroup  defaults 0 0" &gt;&gt; /etc/fstab
host # mount cgroup
host # lxc-create -t debian -n lxcvm00
</code></pre>

<p>いくつかdebconfベースで設定を促されるので適当に設定します。
lxc-createが終わったら設定ファイルを修正します。</p>

<p>lxc.devttydir(設定しないと/dev/tty*が作られなかった(なぜ?)), lxc.tty(ttyの数), lxc.cap.drop からsys_adminを除くといったあたりの修正です。</p>

<figure class='code'><figcaption><span>&#8220;/var/lib/lxc/lxcvm00/config&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># /var/lib/lxc/lxcvm00/config
</span><span class='line'>
</span><span class='line'>## Container
</span><span class='line'>lxc.utsname                             = lxcvm00
</span><span class='line'>lxc.rootfs                              = /var/lib/lxc/lxcvm00/rootfs
</span><span class='line'>lxc.arch                                = x86_64
</span><span class='line'>#lxc.console                            = /var/log/lxc/lxcvm00.console
</span><span class='line'>lxc.devttydir                           = lxc
</span><span class='line'>lxc.tty                                 = 4
</span><span class='line'>lxc.pts                                 = 1024
</span><span class='line'>
</span><span class='line'>## Capabilities
</span><span class='line'>lxc.cap.drop                            = mac_admin
</span><span class='line'>lxc.cap.drop                            = mac_override
</span><span class='line'># lxc.cap.drop                            = sys_admin
</span><span class='line'>lxc.cap.drop                            = sys_module
</span><span class='line'>## Devices
</span><span class='line'># Allow all devices
</span><span class='line'>#lxc.cgroup.devices.allow               = a
</span><span class='line'># Deny all devices
</span><span class='line'>lxc.cgroup.devices.deny                 = a
</span><span class='line'># Allow to mknod all devices (but not using them)
</span><span class='line'>lxc.cgroup.devices.allow                = c *:* m
</span><span class='line'>lxc.cgroup.devices.allow                = b *:* m
</span><span class='line'>
</span><span class='line'># /dev/console
</span><span class='line'>lxc.cgroup.devices.allow                = c 5:1 rwm
</span><span class='line'># /dev/fuse
</span><span class='line'>lxc.cgroup.devices.allow                = c 10:229 rwm
</span><span class='line'># /dev/null
</span><span class='line'>lxc.cgroup.devices.allow                = c 1:3 rwm
</span><span class='line'># /dev/ptmx
</span><span class='line'>lxc.cgroup.devices.allow                = c 5:2 rwm
</span><span class='line'># /dev/pts/*
</span><span class='line'>lxc.cgroup.devices.allow                = c 136:* rwm
</span><span class='line'># /dev/random
</span><span class='line'>lxc.cgroup.devices.allow                = c 1:8 rwm
</span><span class='line'># /dev/rtc
</span><span class='line'>lxc.cgroup.devices.allow                = c 254:0 rwm
</span><span class='line'># /dev/tty
</span><span class='line'>lxc.cgroup.devices.allow                = c 5:0 rwm
</span><span class='line'># /dev/urandom
</span><span class='line'>lxc.cgroup.devices.allow                = c 1:9 rwm
</span><span class='line'># /dev/zero
</span><span class='line'>lxc.cgroup.devices.allow                = c 1:5 rwm
</span><span class='line'>
</span><span class='line'>## Limits
</span><span class='line'>#lxc.cgroup.cpu.shares                  = 1024
</span><span class='line'>#lxc.cgroup.cpuset.cpus                 = 0
</span><span class='line'>#lxc.cgroup.memory.limit_in_bytes       = 256M
</span><span class='line'>#lxc.cgroup.memory.memsw.limit_in_bytes = 1G
</span><span class='line'>
</span><span class='line'>## Filesystem
</span><span class='line'>lxc.mount.entry                         = proc /var/lib/lxc/lxcvm00/rootfs/proc proc nodev,noexec,nosuid 0 0
</span><span class='line'>lxc.mount.entry                         = sysfs /var/lib/lxc/lxcvm00/rootfs/sys sysfs defaults,ro 0 0
</span><span class='line'>#lxc.mount.entry                        = /srv/lxcvm00 /var/lib/lxc/lxcvm00/rootfs/srv/lxcvm00 none defaults,bind 0 0
</span><span class='line'>
</span><span class='line'>## Network
</span><span class='line'>lxc.network.type                        = veth
</span><span class='line'>lxc.network.flags                       = up
</span><span class='line'>lxc.network.hwaddr                      = 00:FF:00:00:00:01
</span><span class='line'>lxc.network.link                        = lxcbr0
</span><span class='line'>lxc.network.veth.pair                   = lxcvm00eth0
</span></code></pre></td></tr></table></div></figure>


<p>コンテナ側の/etc/inittabと/etc/securettyを修正します
consoleにgettyを待機させておくと lxc-start でログインプロンプトが出せます(が、lxc-startは -d でバックグラウンドに移したほうがいいと思います。)</p>

<figure class='code'><figcaption><span>&#8220;/etc/inittab 抜粋&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>c0:2345:respawn:/sbin/getty 38400 console
</span><span class='line'>1:2345:respawn:/sbin/getty 38400 tty1 linux
</span><span class='line'>2:23:respawn:/sbin/getty 38400 tty2 linux
</span><span class='line'>3:23:respawn:/sbin/getty 38400 tty3 linux
</span></code></pre></td></tr></table></div></figure>


<p>securettyにはrootでログイン可能なttyにlxc/*を追加してます。</p>

<figure class='code'><figcaption><span>&#8220;/etc/securetty 抜粋&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>lxc/console
</span><span class='line'>lxc/tty1
</span><span class='line'>lxc/tty2
</span><span class='line'>lxc/tty3
</span></code></pre></td></tr></table></div></figure>


<p>ここまでで、最低限起動するまでの準備ができました。</p>

<h3>起動</h3>

<p>lxc-startでコンテナを起動し、lxc-console でconsoleを開きます。</p>

<pre><code>host # lxc-start -n lxcvm00 -d
host # lxc-console -n lxcvm00
Type &lt;Ctrl+a q&gt; to exit the console, &lt;Ctrl+a Ctrl+a&gt; to enter Ctrl+a itself

Debian GNU/Linux wheezy/sid lxcvm00 tty1

lxcvm00 login: 
</code></pre>

<p>コンソールは Ctrl+a q で抜けられます。
あとはコンテナ内は好きにいじることができます。
/etc/network/interfacesあたりも確認しておきましょう。</p>

<figure class='code'><figcaption><span>&#8220;/etc/network/interfaces&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># interfaces(5) file used by ifup(8) and ifdown(8)
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>        address 10.0.0.4
</span><span class='line'>        broadcast 10.0.0.255
</span><span class='line'>        netmask 255.255.255.0
</span><span class='line'>        gateway 10.0.0.1
</span></code></pre></td></tr></table></div></figure>


<h3>外からアクセスするための設定</h3>

<p>ホストとコンテナ間の通信はブリッジにより行なっていますが、VPSの外、つまりインターネットからのアクセスやインターネットへのアクセスをするためにNATの設定をします。<br/>
外へはeth0にマスカレードし、80と443はコンテナにDNATすることにします。<br/>
sshは不正アクセスが多いので22ではなく適当なポート番号で受け、コンテナの22に渡すことにします。</p>

<pre><code>host # sysctl -w net/ipv4/ip_forward=1
host # iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
host # iptables -t nat -I PREROUTING -i eth0 -p tcp -m tcp -m multiport --dports 80,443 -j DNAT --to-destination 10.0.0.4
host # iptables -t nat -I PREROUTING -i eth0 -p tcp -m tcp --dport 43276 -j DNAT --to-destination 10.0.0.4:22
</code></pre>

<p>これで、コンテナ内でHTTPサービスを動かせば外からのHTTP/HTTPSアクセスはコンテナ内で捌くようになります。<br/>
sshはVPSの43276番でコンテナの22にフォワードしてます。</p>

<h3>まとめ</h3>

<p>以上、LXCはとくに苦労もなく導入することができるのでオススメです。<br/>
また運用するサービスごとにコンテナを分けておけば、将来httpだけ別の環境に移したいなどといった欲求にも容易に対応できるでしょう。</p>

<p>次回はリソース制限や動的な変更などを書いてみたいと思います。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4798118168" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4798121401" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TwiProwlをAWS EC2で動かす(無料)]]></title>
    <link href="http://note.ga.vg/blog/2012/06/12/twiprowl-on-aws-micro-instance/"/>
    <updated>2012-06-12T19:37:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/06/12/twiprowl-on-aws-micro-instance</id>
    <content type="html"><![CDATA[<p><a href="http://aws.amazon.com/jp/" target="_blank"><img class="right" src="https://lh5.googleusercontent.com/-uzJ0rqEN72U/T9cintiTKvI/AAAAAAAAIqI/W8owjZxM-QE/s800/aws-logo.png"></a>
<a href="http://aws.amazon.com/jp/">AWS</a>のEC2 Linux マイクロインスタンスは無料範囲をキープしていれば１年間<a href="http://aws.amazon.com/jp/free/">無料</a>で使え、<a href="http://github.com/takuo/TwiProwl">TwiProwl</a>いっこ動かすくらいなら余裕でキープできそうなのでやってみます。</p>

<p>※ TwiProwlは拙作のTwitter通知ツールですが説明は割愛します。</p>

<!-- more -->


<p>まず、インスタンスの作成ですが、管理コンソールから&#8221;Launch Instance&#8221;を選んで、&#8221;Quick Launch Wizard&#8221;、&#8221;Ubuntu Server 11.10 (64bit)&#8221;を選び次へ進みます。<br/>
ほかのLinuxインスタンスでも出来なくないでしょうが今回はこれで行きます。ちなみに12.04 LTSだとKernelがおかしいらしくProcess#daemonがまともに動かなかったのでやめたほうがいいです。(linux-image-3.2.0-24-virtual)<br/>
<a href="https://lh5.googleusercontent.com/-ERrv6R2Zzlg/T9chQmozptI/AAAAAAAAIpo/Qn6I95WKHf0/s800/aws-launch-instance.png" target="_blank"><img src="https://lh5.googleusercontent.com/-ERrv6R2Zzlg/T9chQmozptI/AAAAAAAAIpo/Qn6I95WKHf0/s400/aws-launch-instance.png"></a></p>

<p>詳細設定はデフォルトのまま。<br/>
<a href="https://lh3.googleusercontent.com/-b3UKWibIm_w/T9chQrjhOEI/AAAAAAAAIpc/ijO-B4uFCag/s800/create-new-instance.png" target="_blank"><img src="https://lh3.googleusercontent.com/-b3UKWibIm_w/T9chQrjhOEI/AAAAAAAAIpc/ijO-B4uFCag/s400/create-new-instance.png"></a></p>

<p>起動しました。<br/>
<a href="https://lh4.googleusercontent.com/-aOuzv5tYklI/T9chWfDzg_I/AAAAAAAAIp0/M_1gq2PojGo/s800/instance-status.png" target="_blank"><img src="https://lh4.googleusercontent.com/-aOuzv5tYklI/T9chWfDzg_I/AAAAAAAAIp0/M_1gq2PojGo/s400/instance-status.png"></a></p>

<p>sshでのログイン方法も管理コンソールのInstance ActionからConnectを選べば説明がでてくるのでその通りにやればよろしいのですが、rootではログインできないのでubuntuユーザでログインすることになります。<br/>
<a href="https://lh3.googleusercontent.com/-NfQGIxuBO3A/T9chQnhlknI/AAAAAAAAIpk/R8-bFy7eBsY/s800/connect-to-instance.png" target="_blank"><img src="https://lh3.googleusercontent.com/-NfQGIxuBO3A/T9chQnhlknI/AAAAAAAAIpk/R8-bFy7eBsY/s400/connect-to-instance.png"></a></p>

<p>インスタンスを起動してsshでログインできたら実行環境をセットアップします。</p>

<pre><code>$ sudo -s
# apt-get update &amp;&amp; apt-get upgrade
# apt-get install ruby1.9.1 git
# gem install oauth ruby-hmac
# exit
$ git clone http://github.com/takuo/TwiProwl.git
</code></pre>

<p>設定ファイルを適当に書きます。(~/.twiprowl.conf として保存)</p>

<figure class='code'><figcaption><span>/home/ubuntu/.twiprowl.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">LogDir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/ubuntu/var/log</span>
</span><span class='line'><span class="l-Scalar-Plain">Debug</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'><span class="l-Scalar-Plain">Daemon</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Prowl</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">APIKey</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ProwlのAPIキーを書く</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">NMA</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">APIKey</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">NMAを使う場合、NMAのAPIキーを書く</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Accounts</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Application</span><span class="p-Indicator">:</span> <span class="s">&quot;Twitter&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">User</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">screen_name</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enable</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>  <span class="l-Scalar-Plain">NotifyMethods</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="s">&quot;prowl&quot;</span>               <span class="c1"># Prowl for iPhone</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="s">&quot;nma&quot;</span>                 <span class="c1"># Notify My Android for Android</span>
</span><span class='line'>  <span class="l-Scalar-Plain">RateLimitThreshold</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Mentions</span><span class="p-Indicator">:</span>                <span class="c1"># Event on Mentions</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>   <span class="l-Scalar-Plain">IgnoreSelf</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>       <span class="c1"># Ignore mention by myself</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Direct</span><span class="p-Indicator">:</span>                  <span class="c1"># Event on Direct Messages</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>   <span class="l-Scalar-Plain">IgnoreSelf</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>       <span class="c1"># Ignore DM event from myself</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Retweets</span><span class="p-Indicator">:</span>                <span class="c1"># Event on Retweets</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Membership</span><span class="p-Indicator">:</span>              <span class="c1"># Event on List Membership</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>   <span class="l-Scalar-Plain">IgnoreSelf</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>       <span class="c1"># Ignore event by myself</span>
</span><span class='line'>   <span class="l-Scalar-Plain">IgnoreNegative</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>   <span class="c1"># Ignore remove event</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Favorite</span><span class="p-Indicator">:</span>                <span class="c1"># Event on Favorite/Unfavorite</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>   <span class="l-Scalar-Plain">IgnoreSelf</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>       <span class="c1"># Ignore event by myself</span>
</span><span class='line'>   <span class="l-Scalar-Plain">IgnoreNegative</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>   <span class="c1"># Ignore Unfavorite event</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Unfollowed</span><span class="p-Indicator">:</span>              <span class="c1"># Event on Unfollowed, requiresi API rate</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Interval</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">60</span>
</span></code></pre></td></tr></table></div></figure>


<p>適当です。これ以上のことは自分で調べて好きなようにしたらいいと思います。
動かす。</p>

<pre><code>$ mkdir -p ~/var/log
$ cd ~/TwiProwl
$ ./twiprowl
oauthなんたらかんたら(認証)
</code></pre>

<p>おわり。<br/>
余計なもの(ruby1.8とか)を入れた場合の不都合は知りません。<br/>
無料範囲に収まらず課金が発生しても責任は負いません。<br/>
今の所1年間ということらしいので1年後は気を付けましょう。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4844329804" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PENTAX Q 買った]]></title>
    <link href="http://note.ga.vg/blog/2012/06/07/pentax-q/"/>
    <updated>2012-06-07T20:59:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/06/07/pentax-q</id>
    <content type="html"><![CDATA[<p><a href="https://lh5.googleusercontent.com/--sDOVgrNL3g/UBpCFd0hkCI/AAAAAAAAKW8/iwv56X1-ppo/s800/DSC_0148.jpg" target="_blank"><img class="right" src="https://lh5.googleusercontent.com/--sDOVgrNL3g/UBpCFd0hkCI/AAAAAAAAKW8/iwv56X1-ppo/s288/DSC_0148.jpg" title="PENTAX Q" ></a>
PENTAX Qを買ってしまいました。<br/>
デジタル一眼はオリンパス E-620に続き2台目となります。</p>

<!-- more -->


<p>E-620はそれはそれでいいのですが、やはりフォーサーズマウントはでかいので気軽に持ち歩くには厳しく、デートとかでふらふらと写真撮ったりするには向いてないと思っていて、ミラーレスの一眼が欲しいなぁと考えていたのでした。</p>

<p>今年の3月には限定色のシルバーがでており、そろそろ在庫がなくなりつつあるということで、それが後押しとなり購入に踏み切った次第です。</p>

<p>しかしながら、これで月などを撮るには相当工夫して望遠レンズ取り付けたりしないといけないので、そういうのにはやはり向きません。<br/>
あとAF速度も若干遅い、バッテリ消費が大きいなどのデメリットもありますが、それを差し引いても素晴らしいコンパクトさであると思っています。</p>

<p>E-620にくらべるとやはりバッテリ消費は激しい印象で、1日撮りまくってたら空っぽになるので替えのバッテリは予め用意していたほうが良さそうです。</p>

<p>で、試し撮りの写真。マクロ撮影わりとふんわり撮れて気持ちいーです。
<a href="https://picasaweb.google.com/lh/photo/sTfcU6wDHl7jwTMxJxp1wPShcrc0A2PLHIWmf1KZ17Q?feat=directlink" target="_blank"><img src="https://lh5.googleusercontent.com/-yhHU5Pe-iW0/T9BJ3HZMyZI/AAAAAAAAIZQ/X9tDgNJro08/s288/IMGP0014.JPG"></a>
<a href="https://picasaweb.google.com/lh/photo/XAEkt-Th0U-ev3WHfGv8r_Shcrc0A2PLHIWmf1KZ17Q?feat=directlink" target="_blank"><img src="https://lh3.googleusercontent.com/-JR-CcDax-ho/T9BJ3BP6sPI/AAAAAAAAIZQ/PFnowslKsMo/s288/IMGP0005.JPG"></a>
<a href="https://picasaweb.google.com/lh/photo/ijtNHiOFThhNKHkzHtPbWfShcrc0A2PLHIWmf1KZ17Q?feat=directlink" target="_blank"><img src="https://lh6.googleusercontent.com/-_j9HlOUCc3o/T9BJ3A4xKpI/AAAAAAAAIZQ/6SqDaN869Vc/s288/IMGP0055.JPG"></a>
<a href="https://picasaweb.google.com/lh/photo/CquM4geNtOEUOOdWhaXIofShcrc0A2PLHIWmf1KZ17Q?feat=directlink" target="_blank"><img src="https://lh4.googleusercontent.com/-BDVBG71W-sE/T9BJ3IIHVoI/AAAAAAAAIZQ/O2fACa8eqaA/s288/IMGP0045.JPG"></a>
<a href="https://picasaweb.google.com/lh/photo/KRu3s9B0tjkqORAw_VvKwvShcrc0A2PLHIWmf1KZ17Q?feat=directlink" target="_blank"><img src="https://lh4.googleusercontent.com/-0zV2Y3VsaS4/T9BJ3M8fjxI/AAAAAAAAIZQ/t3zDuH1S5XY/s288/IMGP0088.JPG"></a>
<a href="https://picasaweb.google.com/lh/photo/arK1noVm0yQ2fYjmWEojWvShcrc0A2PLHIWmf1KZ17Q?feat=directlink" target="_blank"><img src="https://lh6.googleusercontent.com/-Ti_UFU-h2gg/T9BJ3IPl0SI/AAAAAAAAIZQ/wjItT0VfMBI/s288/IMGP0090.JPG"></a></p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B005APLQMQ" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0057LA4P8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0076RR9KY" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B000VDXESQ" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0071GT6CO" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0057LA5C0" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4844331248" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4817942673" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チーズケーキ]]></title>
    <link href="http://note.ga.vg/blog/2012/05/07/make-cheese-cake/"/>
    <updated>2012-05-07T15:22:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/05/07/make-cheese-cake</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://farm9.staticflickr.com/8281/7731045244_074e3a3faf_m.jpg"></p>

<p>わりと上手くできたので自分用のメモ。</p>

<!-- more -->


<p><strong>土台</strong></p>

<ul>
<li>ビスケット 50g</li>
<li>無塩バター 40g</li>
</ul>


<p>バター湯煎して溶かしてビスケットとまぜてこねて型に敷く。冷蔵庫で冷やしとく。</p>

<p><strong>生地</strong></p>

<ul>
<li>クリームチーズ 200g レンジで40度くらいまで溶かす</li>
<li>砂糖 70g</li>
<li>卵2個</li>
<li>薄力粉 30g</li>
<li>生クリーム200ml</li>
<li>レモン汁 大さじ2 (3でもいいかも)</li>
</ul>


<p><strong>手順</strong></p>

<ol>
<li>チーズと砂糖をまぜてなめらかにする。</li>
<li>卵を混ぜる</li>
<li>薄力粉をふるって混ぜる</li>
<li>生クリームを混ぜる</li>
<li>レモン汁を混ぜる</li>
<li>泡立たないように混ぜる</li>
</ol>


<p>型に生地を流しこんで180度余熱オーブンで45分焼く。<br/>
冷ます。しぼんだら冷蔵庫。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Adwordsに広告を出してdropboxの容量を増やした]]></title>
    <link href="http://note.ga.vg/blog/2012/04/19/dropbox-google-adwords-campaign/"/>
    <updated>2012-04-19T16:55:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/04/19/dropbox-google-adwords-campaign</id>
    <content type="html"><![CDATA[<p><a href="http://www.dropbox.com/" target="_blank"><img class="right" src="https://www.dropbox.com/static/images/logo210.png" title="Dropbox" ></a>
dropboxはお友達を紹介すると一人に付き0.5G,合計16GB(32人紹介)のボーナス領域をもらえるのですが、
紹介リンクをGoogle Adwordsで宣伝して獲得しようというやーつです。</p>

<!-- more -->


<p>(2012-05-17追記)<br/>
<strong>商標権侵害の申し立てによりこの技は使えなくなりました。</strong>
<img class="left" src="http://ga.vg/g/d148.png"></p>

<br style="clear: both" />


<p>わりと前に話題になっていてそのうちやろうと思っていたんですが、先日7500円の無料券がきたのでやってみました。
方法そのものについては<a href="https://www.google.co.jp/search?q=dropbox+adwords">ぐぐれ</a>ばでてくるの割愛するとして、実際どの程度効果あったのかだけ。</p>

<p>32人の紹介が完了するまでだいたい1週間かかりました。クリック数はもちろん、dropboxアカウント作成まではわりとすぐに32を超えますが、アプリケーションのインストールまでが紹介プロセスになっているのでインストールまでやってくれない方もままおり、思ったより時間がかかりました。</p>

<p><a href="https://lh5.googleusercontent.com/-6jgIav3KkjI/T4_HBC8pBbI/AAAAAAAAHfw/bYKznoqUzQg/s800/dropbox-invite-status.png"><img src="https://lh5.googleusercontent.com/-6jgIav3KkjI/T4_HBC8pBbI/AAAAAAAAHfw/bYKznoqUzQg/s400/dropbox-invite-status.png" height="266" width="400" /></a></p>

<p>Adwordsのレポートはこんな感じになっていて、総額3148円と、無料クーポンの半分で済みました。</p>

<p><a href="https://lh5.googleusercontent.com/-nIOsHmq_Yi8/T4_HDB4Fo4I/AAAAAAAAHf4/q2SDsbeq0Qk/s800/adwords-report.png"><img src="https://lh5.googleusercontent.com/-nIOsHmq_Yi8/T4_HDB4Fo4I/AAAAAAAAHf4/q2SDsbeq0Qk/s400/adwords-report.png" height="245" width="400" /></a></p>

<p>まぁ、実際32人のお友達に紹介するのは大変だし、無料クーポンで済みますからやっといて損はないかと思います。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774150428" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4881667971" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CM9 support for emoji on Mms]]></title>
    <link href="http://note.ga.vg/blog/2012/04/18/cm9-support-for-emoji-on-mms/"/>
    <updated>2012-04-18T15:06:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/04/18/cm9-support-for-emoji-on-mms</id>
    <content type="html"><![CDATA[<p>CyanogenMod 9のMmsに絵文字サポートが入っていた。</p>

<!-- more -->


<p><a href="http://review.cyanogenmod.com/14709">http://review.cyanogenmod.com/14709</a></p>

<p>日本のキャリアでの使用に於いて、どの程度カバーできているのかは知らないけれど、</p>

<pre><code>as used on the iPhone, or even the Gmail website.
</code></pre>

<p>だとのことで、それなりなのではなかろうか。<br/>
自分もかつてGingerbread世代までのMms.apkに絵文字サポートを実装したりはしていたけれど、もはやMmsを使っていないため試そうにも環境がない。</p>

<p>絵文字を画像リソースとして保持するのでapkのサイズがでかくなるのだが、やはりそのことについて文句を言う奴もいるわけで。<br/>
それに対してCyanogenの一言。</p>

<pre><code>I don't think the extra size will be an issue. If it is, someone will make a hack to exclude this :)
</code></pre>

<p>いい判断。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xfce(など)でChromeのプロキシ設定をする]]></title>
    <link href="http://note.ga.vg/blog/2012/04/18/setting-proxy-for-chrome-on-xfce/"/>
    <updated>2012-04-18T11:12:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/04/18/setting-proxy-for-chrome-on-xfce</id>
    <content type="html"><![CDATA[<p>Xfceなど、システムのプロキシ設定ができない環境だとChromeはプロキシの設定が利用できず、次のように表示されてしまいます。<br/>
<img src="http://ga.vg/g/0238.png"></p>

<p>コマンドラインからは設定できるとあるので、やってみます。</p>

<!-- more -->


<p>まず <em>proxy.pac</em> ファイルを書きます。
書き方については<a href="https://www.google.co.jp/search?q=proxy.pac">ぐぐれ</a>ばいくらでも出てきますが、例えばこんな感じに。</p>

<figure class='code'><figcaption><span>/home/user/proxy.pac</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">FindProxyForURL</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="nx">host</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nx">isPlainHostName</span><span class="p">(</span><span class="nx">host</span><span class="p">)</span><span class="o">||</span>
</span><span class='line'>      <span class="nx">isInNet</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span><span class="s2">&quot;192.168.0.0&quot;</span><span class="p">,</span><span class="s2">&quot;255.255.0.0&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="nx">isInNet</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="s2">&quot;127.0.0.0&quot;</span> <span class="p">,</span> <span class="s2">&quot;255.0.0.0&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="nx">shExpMatch</span><span class="p">(</span> <span class="nx">host</span><span class="p">,</span> <span class="s2">&quot;*.example.jp&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="nx">host</span> <span class="o">==</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'>     <span class="k">return</span> <span class="s2">&quot;DIRECT&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>     <span class="k">return</span> <span class="s2">&quot;PROXY 192.168.0.1:3128&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、デスクトップやメニュー、パネルのランチャー設定をかえます。<br/>
<em>/usr/share/applications/google-chrome.desktop</em> の</p>

<pre><code>Exec=/opt/google/chrome/google-chrome %U
</code></pre>

<p>のようになっている部分を</p>

<pre><code>Exec=/opt/google/chrome/google-chrome --proxy-pac-url=file:///home/user/proxy.pac %U
</code></pre>

<p>にして、<em>~/.local/share/applications/google-chrome.desktop</em> にコピー。<br/>
以上で、プロキシの設定として <em>/home/user/proxy.pac</em> が使われるようになりました。</p>

<p>気をつけることは、chromeが立ち上がってない状態で別のアプリケーションからの起動の際、これだけではカバーできないことです。<br/>
そういう場合はラッパースクリプトでも用意しておきましょう。</p>

<figure class='code'><figcaption><span>/opt/google/chrome/google-chrome</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /opt/google/chrome/google-chrome.real <span class="se">\</span>
</span><span class='line'>  --proxy-pac-url<span class="o">=</span>file:///home/user/proxy.pac <span class="nv">$*</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[おじいちゃん携帯 for Android 2.0]]></title>
    <link href="http://note.ga.vg/blog/2012/04/12/ojiichan-keitai2-dot-0/"/>
    <updated>2012-04-12T19:15:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/04/12/ojiichan-keitai2-dot-0</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/koyachi">koyachi</a>さんがオリジナルであるiOS版を忠実に移植してくださったのをpull requestいただいたので commitしてpublishいたしました。<br/>
ありがとうございます。</p>

<p><a href="https://play.google.com/store/apps/details?id=jp.takuo.android.ojiichan" title="おじいちゃん携帯 for Android">マーケットリンク</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress]]></title>
    <link href="http://note.ga.vg/blog/2012/04/11/switching-to-octopress/"/>
    <updated>2012-04-11T14:32:00+09:00</updated>
    <id>http://note.ga.vg/blog/2012/04/11/switching-to-octopress</id>
    <content type="html"><![CDATA[<p>エンジニアらしくgithubでブログを書こうと思い立ってOctopressに変更してみたものの、<br/>
テーマがろくに揃ってないのでなかなか厳しい情況。<br/>
まぁデフォルトのテーマから徐々にいじっていけばいいと思いつつ、コレを書いている次第であります。</p>

<!-- more -->


<p>そもそも、Markdownやtextileに慣れていないのでそこからという感じ。<br/>
ただ、code snippetあたりは便利そうな気がしている。</p>

<p>というわけでテスト。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takuojp02-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873113679" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
</feed>
